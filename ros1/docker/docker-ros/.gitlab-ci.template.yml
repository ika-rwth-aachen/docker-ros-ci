workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"      # run child pipeline if triggered by parent pipeline
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"  # run merge request pipeline if triggered by merge request
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS  # don't run branch pipeline if open merge request exists
      when: never
    - if: $CI_COMMIT_BRANCH                             # run branch pipeline if triggered by commit
    - if: $CI_COMMIT_TAG                                # run tag pipeline with specific image tags if triggered by tag
      variables:
        IMAGE_DEV_PUSH:     ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}-dev
        IMAGE_RUN_PUSH:     ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
        IMAGE_DEV_CI_AMD64: ${IMAGE_DEV_PUSH}_ci-amd64
        IMAGE_DEV_CI_ARM64: ${IMAGE_DEV_PUSH}_ci-arm64
        IMAGE_RUN_CI_AMD64: ${IMAGE_RUN_PUSH}_ci-amd64
        IMAGE_RUN_CI_ARM64: ${IMAGE_RUN_PUSH}_ci-arm64


variables:
  IMAGE_DEV:          ${CI_REGISTRY_IMAGE}:latest-dev
  IMAGE_RUN:          ${CI_REGISTRY_IMAGE}:latest
  IMAGE_DEV_PUSH:     ${IMAGE_DEV}
  IMAGE_RUN_PUSH:     ${IMAGE_RUN}
  IMAGE_DEV_CI_AMD64: ${IMAGE_DEV}_${CI_COMMIT_REF_SLUG}_ci-amd64
  IMAGE_DEV_CI_ARM64: ${IMAGE_DEV}_${CI_COMMIT_REF_SLUG}_ci-arm64
  IMAGE_RUN_CI_AMD64: ${IMAGE_RUN}_${CI_COMMIT_REF_SLUG}_ci-amd64
  IMAGE_RUN_CI_ARM64: ${IMAGE_RUN}_${CI_COMMIT_REF_SLUG}_ci-arm64
  DOCKER_COMPOSE_DIR: docker
  ROS_WORKSPACE_DIR: .
  DISABLE_ARCH_AMD64: 'false'
  DISABLE_ARCH_ARM64: 'false'
  DISABLE_INDUSTRIAL_CI: 'false'
  GIT_HTTPS_USER: gitlab-ci-token
  GIT_HTTPS_PASSWORD: $CI_JOB_TOKEN
  # -----
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: /certs
  DOCKER_BUILDKIT: 1


stages:
  - Build Images (amd64)
  - Build Images (arm64)
  - ROS Industrial CI
  - Push Images


default:
  image: docker:20.10.22-git
  services:
    - docker:20.10.22-dind
  tags:
    - privileged
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create buildx-context
    - docker buildx create --use buildx-context
    - cd $DOCKER_COMPOSE_DIR
    - 'sed -i "/\    image:/a\    platform: $PLATFORM" docker-compose.yaml'
    - 'sed -i "/\  context:/a\  cache_from: [$IMAGE_CACHE]\n\  cache_to: [type=inline]" docker-compose.yaml'


dev-amd64:
  stage: Build Images (amd64)
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  script:
    - docker compose build dev
    - docker tag $IMAGE_DEV $IMAGE_DEV_CI_AMD64
    - docker push $IMAGE_DEV_CI_AMD64
  variables:
    PLATFORM: linux/amd64
    IMAGE_CACHE: $IMAGE_DEV_CI_AMD64

run-amd64:
  stage: Build Images (amd64)
  rules:
    - if: $DISABLE_ARCH_AMD64 != 'true'
  script:
    - docker compose build run
    - docker tag $IMAGE_RUN $IMAGE_RUN_CI_AMD64
    - docker push $IMAGE_RUN_CI_AMD64
  variables:
    PLATFORM: linux/amd64
    IMAGE_CACHE: $IMAGE_RUN_CI_AMD64


dev-arm64:
  stage: Build Images (arm64)
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  script:
    - docker compose build dev
    - docker tag $IMAGE_DEV $IMAGE_DEV_CI_ARM64
    - docker push $IMAGE_DEV_CI_ARM64
  variables:
    PLATFORM: linux/arm64
    IMAGE_CACHE: $IMAGE_DEV_CI_ARM64

run-arm64:
  stage: Build Images (arm64)
  rules:
    - if: $DISABLE_ARCH_ARM64 != 'true'
  script:
    - docker compose build run
    - docker tag $IMAGE_RUN $IMAGE_RUN_CI_ARM64
    - docker push $IMAGE_RUN_CI_ARM64
  variables:
    PLATFORM: linux/arm64
    IMAGE_CACHE: $IMAGE_RUN_CI_ARM64


Test dev-amd64:
  stage: ROS Industrial CI
  rules:
    - if: $DISABLE_INDUSTRIAL_CI != 'true'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - apk add --update bash coreutils grep tar
    - git clone --branch master --depth 1 https://github.com/ros-industrial/industrial_ci.git .industrial_ci
    - test -f $ROS_WORKSPACE_DIR/.repos || echo "repositories:" > $ROS_WORKSPACE_DIR/.repos
  script: .industrial_ci/gitlab.sh
  variables:
    UPSTREAM_WORKSPACE: $ROS_WORKSPACE_DIR/.repos
    TARGET_WORKSPACE: $ROS_WORKSPACE_DIR
    ADDITIONAL_DEBS: git
    BEFORE_INIT_EMBED: git config --global url.${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}:${CI_SERVER_PORT}.insteadOf ${CI_SERVER_URL}
    DOCKER_IMAGE: $IMAGE_DEV_CI_AMD64
    DOCKER_RUN_OPTS: -u root:root


Push dev:
  stage: Push Images
  needs:
    - job: dev-amd64
      optional: true
    - job: dev-arm64
      optional: true
    - job: Test dev-amd64
      optional: true
  rules:
    - if: $DISABLE_ARCH_AMD64 == 'true' && $DISABLE_ARCH_ARM64 == 'true'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  script:
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create $IMAGE_DEV_PUSH --amend $IMAGE_DEV_CI_AMD64 --amend $IMAGE_DEV_CI_ARM64; fi
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 = "true" ]; then docker manifest create $IMAGE_DEV_PUSH --amend $IMAGE_DEV_CI_AMD64; fi
    - if [ $DISABLE_ARCH_AMD64 = "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create $IMAGE_DEV_PUSH --amend $IMAGE_DEV_CI_ARM64; fi
    - docker manifest push $IMAGE_DEV_PUSH

Push run:
  stage: Push Images
  needs:
    - job: run-amd64
      optional: true
    - job: run-arm64
      optional: true
    - job: Test dev-amd64
      optional: true
  rules:
    - if: $DISABLE_ARCH_AMD64 == 'true' && $DISABLE_ARCH_ARM64 == 'true'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  script:
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create $IMAGE_RUN_PUSH --amend $IMAGE_RUN_CI_AMD64 --amend $IMAGE_RUN_CI_ARM64; fi
    - if [ $DISABLE_ARCH_AMD64 != "true" ] && [ $DISABLE_ARCH_ARM64 = "true" ]; then docker manifest create $IMAGE_RUN_PUSH --amend $IMAGE_RUN_CI_AMD64; fi
    - if [ $DISABLE_ARCH_AMD64 = "true" ] && [ $DISABLE_ARCH_ARM64 != "true" ]; then docker manifest create $IMAGE_RUN_PUSH --amend $IMAGE_RUN_CI_ARM64; fi
    - docker manifest push $IMAGE_RUN_PUSH
